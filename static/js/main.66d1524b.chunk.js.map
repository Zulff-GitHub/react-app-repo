{"version":3,"sources":["logo.svg","Header.tsx","Body.tsx","Countword.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","src","logo","className","alt","appName","Body","useForm","register","handleSubmit","errors","onSubmit","data","wordList","table","document","getElementById","innerHTML","i","length","row","word","occurance","buildTable","param","aWord","inText","toLowerCase","replace","split","aWordObj","index","some","check","index2","findIndex","newWord","toString","trim","push","sort","a","b","Countword","fullText","htmlFor","ref","required","id","name","rows","cols","placeholder","Button","type","Table","striped","bordered","hover","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8LAAe,G,WAAA,IAA0B,kCCO1B,SAASA,EAAOC,GAC3B,OACI,gCACI,qBAAKC,IAAKC,EAAMC,UAAU,WAAWC,IAAI,SACzC,6BAAKJ,EAAMK,a,kCCER,SAASC,IAAQ,IAAD,EAEcC,cAAlCC,EAFoB,EAEpBA,SAAUC,EAFU,EAEVA,aAAcC,EAFJ,EAEIA,OAEzBC,EAAWF,GAAa,SAACG,IAmCnC,SAAoBC,GAChB,IAAMC,EAAQC,SAASC,eAAe,eAGnCF,IAAOA,EAAMG,UAAY,IAE5B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAASM,OAAQD,IAAI,CACrC,IAAIE,EAAG,4CACeP,EAASK,GAAGG,KAD3B,8CAEeR,EAASK,GAAGI,UAF3B,kCAIJR,IACCA,EAAMG,WAAaG,IA7CvBG,CCGD,SAAmBC,GACtB,IACIC,EADgBD,EAAME,OAAOC,cAAcC,QAAQ,YAAa,IAClDC,MAAM,KACpBC,EAAsB,GAG1B,IAAI,IAAIC,KAASN,EAGb,GAD0BK,EAASE,MAAK,SAAAC,GAAK,OAAIA,EAAMZ,OAASI,EAAMM,MAOhE,CACF,IAAIG,EAASJ,EAASK,WAAU,SAAAF,GAAK,OAAIA,EAAMZ,OAASI,EAAMM,MAC9DD,EAASI,GAAQZ,gBARN,CACX,IAAIc,EAAkB,CAClBf,KAAKI,EAAMM,GAAOM,WAClBf,UAAU,GAEa,KAAxBc,EAAQf,KAAKiB,QAAeR,EAASS,KAAKH,GASrD,OADAN,EAASU,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnB,UAAYoB,EAAEpB,UAAa,GAAK,KACnDQ,ED3BwBa,CAAU,CAACjB,OAASd,EAAKgC,eAGzD,OACI,+BACA,uBAAMjC,SAAUA,EAAhB,UACI,gCACI,uBAAOkC,QAAQ,WAAf,6BACA,0BAAUC,IAAKtC,EAAS,CAAEuC,UAAU,IAASC,GAAG,WAAWC,KAAK,WAAWC,KAAM,EAAGC,KAAM,GACtFhD,UAAU,eACViD,YAAY,0BACf1C,EAAOkC,UAAY,mBAAGzC,UAAU,YAAb,kCAClB,uBACN,cAACkD,EAAA,EAAD,CAAQC,KAAK,SAAb,oBAAqC,uBACrC,uBACA,8BACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACA,+BACI,sCACA,gDAIJ,uBAAOV,GAAG,0BE5BfW,MATf,WACE,OACE,sBAAKxD,UAAU,MAAf,UACE,cAACJ,EAAD,CAAQM,QAAQ,mBAChB,cAACC,EAAD,QCKSsD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASC,eAAe,SAM1B4C,K","file":"static/js/main.66d1524b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport logo from './logo.svg';\r\n\r\ninterface HeaderProps {\r\n    appName: string;\r\n}\r\n\r\nexport default function Header(props: HeaderProps) {\r\n    return (\r\n        <div>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>{props.appName}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport \"./App.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Countword } from './Countword';\r\n\r\ninterface wordObj {\r\n    word: string;\r\n    occurance: number;\r\n}\r\n\r\nexport default function Body() {\r\n\r\n    const {register, handleSubmit, errors} = useForm()\r\n\r\n    const onSubmit = handleSubmit((data) => {\r\n        let resultList: wordObj[] = Countword({inText : data.fullText});\r\n        buildTable(resultList);\r\n    })\r\n    return (\r\n        <main>\r\n        <form onSubmit={onSubmit}>\r\n            <div>\r\n                <label htmlFor=\"fullText\">Enter Text Here</label>\r\n                <textarea ref={register({ required: true })} id=\"fullText\" name=\"fullText\" rows={4} cols={30}\r\n                    className='form-control' \r\n                    placeholder='Enter some texts here'/> \r\n                {errors.fullText && <p className='error-msg'>Text box is empty</p>}      \r\n            </div><br />\r\n            <Button type=\"submit\">Submit</Button><br />\r\n            <br />\r\n            <div>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Word</th>\r\n                        <th>Occurance</th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody id=\"tableResult\">\r\n                        \r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </form>\r\n        </main>\r\n      );\r\n}\r\n\r\nfunction buildTable(wordList : wordObj[]){\r\n    const table = document.getElementById('tableResult');\r\n    \r\n    //Reset table list\r\n    if(table) table.innerHTML = \"\";\r\n\r\n    for (var i = 0; i < wordList.length; i++){\r\n        var row = `<tr>\r\n                        <td>${wordList[i].word}</td>\r\n                        <td>${wordList[i].occurance}</td>\r\n                  </tr>`;\r\n        if(table)          \r\n            table.innerHTML += row\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\ninterface inTextProps {\r\n    inText: string;\r\n}\r\n\r\ninterface wordObj {\r\n    word: string;\r\n    occurance: number;\r\n}\r\n\r\n/**\r\n * Countword function\r\n *\r\n * Function to generate an array of wordObjs from a string\r\n *\r\n * Parameters:\r\n *   inTextProps\r\n *\r\n * Return:\r\n *   array of wordObj\r\n */\r\nexport function Countword(param: inTextProps) {\r\n    let sText: string = param.inText.toLowerCase().replace(/[^\\w\\s]/gi, ''); //Clean up text by lowercase and removing special characters except for space\r\n    let aWord = sText.split(\" \");\r\n    let aWordObj: wordObj[] = [];\r\n\r\n    //Loop each wordObj\r\n    for(var index in aWord)\r\n    { \r\n        let wordExists: boolean = aWordObj.some(check => check.word === aWord[index]);\r\n        if(!wordExists){\r\n            let newWord:wordObj = {\r\n                word:aWord[index].toString(),\r\n                occurance:1\r\n            };\r\n            if(newWord.word.trim() !== '') aWordObj.push(newWord);\r\n        } else{\r\n            let index2 = aWordObj.findIndex(check => check.word === aWord[index]);\r\n            aWordObj[index2].occurance++;\r\n        }\r\n        \r\n    }\r\n\r\n    aWordObj.sort((a, b) => (a.occurance < b.occurance) ? 1 : -1); //Sort wordObjs according to occurance\r\n    return (aWordObj);\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Body from './Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header appName=\"Word Count App\" />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}